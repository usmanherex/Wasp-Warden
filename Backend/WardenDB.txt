CREATE TABLE Users (
    UserId INT IDENTITY(1,1) PRIMARY KEY,
    UserName VARCHAR(50) NOT NULL UNIQUE,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(200) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    Address VARCHAR(255) NULL,
    Gender VARCHAR(10) NULL,
    PhoneNumber VARCHAR(15) NOT NULL,
    NationalID VARCHAR(20) NOT NULL UNIQUE,
    ProfilePicture VARBINARY(MAX) NULL, -- Store profile picture in binary format
    AccountStatus VARCHAR(20) DEFAULT 'Active' CHECK (AccountStatus IN ('Active', 'Suspended', 'Deleted')), -- Allowed values
    UserType VARCHAR(20) CHECK (UserType IN ('Consumer', 'Farmer', 'Agri-Business')) NOT NULL,
    RegistrationDate DATE DEFAULT GETDATE()
);
CREATE TABLE Consumers (
    ConsumerID INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL, -- FK to Users
    AssociatedCompany VARCHAR(100) NULL,
    ConsumerType VARCHAR(20) CHECK (ConsumerType IN ('Individual', 'Corporate')) NOT NULL,
    FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);
CREATE TABLE AgriBusiness (
    AgriBusinessID INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL, -- FK to Users
    AgriBusinessName VARCHAR(100) NOT NULL,
    BusinessDescription TEXT NULL,
    BusinessType VARCHAR(20) CHECK (BusinessType IN ('Retailer', 'Wholesaler', 'Distributor')) NOT NULL,
    BusinessRegistrationNumber VARCHAR(50) UNIQUE NULL,
    FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);
CREATE TABLE Farmers (
    FarmerID INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL, -- FK to Users
    FarmAddress TEXT NOT NULL,
    FarmSize FLOAT NULL, -- Size in acres/hectares
	Specialization VARCHAR(50) NULL, -- Crops, Livestock, Mixed
    FarmYieldCapacity FLOAT NULL, -- Annual production capacity
    FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);

CREATE TABLE Chat (
    ChatID INT IDENTITY(1,1) PRIMARY KEY,
    User1ID INT FOREIGN KEY REFERENCES Users(UserID),
    User2ID INT FOREIGN KEY REFERENCES Users(UserID),
    CreatedAt DATETIME DEFAULT GETDATE()
)

CREATE TABLE Messages (
    MessageID INT IDENTITY(1,1) PRIMARY KEY,
    ChatID INT FOREIGN KEY REFERENCES Chat(ChatID),
    SenderID INT FOREIGN KEY REFERENCES Users(UserID),
    ReceiverID INT FOREIGN KEY REFERENCES Users(UserID),
    MessageType VARCHAR(50),
    Content TEXT,
    FileUrl VARCHAR(MAX),
    Time_Stamp DATETIME DEFAULT GETDATE()
)
-- Create Category Table (since it's referenced by Product table)
CREATE TABLE Categories (
    categoryID INT IDENTITY(1,1) PRIMARY KEY,
    categoryName VARCHAR(100) NOT NULL,
    metricSystem VARCHAR(50) NOT NULL,
  
);

-- Create Items Table
CREATE TABLE Items (
    itemID INT IDENTITY(1,1) PRIMARY KEY,
    ownerID INT  NOT NULL,
    itemName VARCHAR(100) NOT NULL,
    itemPrice DECIMAL(10,2) NOT NULL CHECK (itemPrice >= 0),
    itemRating FLOAT CHECK (itemRating >= 0 AND itemRating <= 5),
    itemDescription TEXT,
    itemCreationDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    salePercentage FLOAT CHECK (salePercentage >= 0 AND salePercentage <= 100),
	quantityAvailable INT NOT NULL CHECK (quantityAvailable >= 0),
    itemImage VARBINARY(MAX),
);

-- Create Products Table
CREATE TABLE Products (
    productID  PRIMARY KEY,
    minimumBulkAmount INT NOT NULL CHECK (minimumBulkAmount >= 0),
    categoryID INT NOT NULL,
    );

  -- First, create a sequence for the report counter
CREATE SEQUENCE report_counter_seq
    START WITH 1
    INCREMENT BY 1;

-- Create the reports table
CREATE TABLE DiseaseReports (
    reportID VARCHAR(20) PRIMARY KEY,
	userID INT ,
    timestamp DATETIME NOT NULL,
    modelName VARCHAR(100) NOT NULL,
    detectedIssue VARCHAR(100) NOT NULL,
    confidence DECIMAL(5,2) NOT NULL CHECK (confidence >= 0 AND confidence <= 100),
    severity VARCHAR(20) NOT NULL,
    imageData VARBINARY(MAX),
    recommendations TEXT NOT NULL,
    preventiveMeasures TEXT NOT NULL,
    treatment VARCHAR(255) NOT NULL,

);

-- Create a trigger for automatic reportID generation
CREATE TRIGGER trg_GenerateReportID
ON DiseaseReports
INSTEAD OF INSERT
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO DiseaseReports (
        reportID,
		userID,
        timestamp,
        modelName,
        detectedIssue,
        confidence,
        severity,
        imageData,
        recommendations,
        preventiveMeasures,
        treatment
    )
    SELECT 
        'RPT-' + CAST(YEAR(i.timestamp) AS VARCHAR(4)) + '-' + 
        RIGHT('000' + CAST(NEXT VALUE FOR report_counter_seq AS VARCHAR(3)), 3),
		i.userID,
        i.timestamp,
        i.modelName,
        i.detectedIssue,
        i.confidence,
        i.severity,
        i.imageData,
        i.recommendations,
        i.preventiveMeasures,
        i.treatment
    FROM inserted i;
END;

-- Create Machines table
CREATE TABLE Machines (
    machineID INT  PRIMARY KEY,
    machineType VARCHAR(100) NOT NULL,
    machineWeight DECIMAL(10,2) NOT NULL,
    powerSource VARCHAR(50) NOT NULL,
    warranty VARCHAR(100),
    CHECK (machineWeight > 0),
   
);

-- Create Chemicals table
CREATE TABLE Chemicals (
    chemicalID INT  PRIMARY KEY,
    metricSystem VARCHAR(20) NOT NULL,
    quantity DECIMAL(10,2) NOT NULL,
    chemicalType VARCHAR(100) NOT NULL,
    expiryDate DATE NOT NULL,
    hazardLevel VARCHAR(20) NOT NULL

    
);

-- Saved Products Table
CREATE TABLE saved_products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    itemID INTEGER NOT NULL,
    userID INTEGER NOT NULL
);

  -- Product Ratings Table
CREATE TABLE product_ratings (
    itemID INTEGER PRIMARY KEY,
    no1Stars INTEGER DEFAULT 0 NOT NULL CHECK (no1Stars >= 0),
    no2Stars INTEGER DEFAULT 0 NOT NULL CHECK (no2Stars >= 0),
    no3Stars INTEGER DEFAULT 0 NOT NULL CHECK (no3Stars >= 0),
    no4Stars INTEGER DEFAULT 0 NOT NULL CHECK (no4Stars >= 0),
    no5Stars INTEGER DEFAULT 0 NOT NULL CHECK (no5Stars >= 0)
);
-- Product Review Table
CREATE TABLE product_reviews (
    reviewID INT IDENTITY(1,1) PRIMARY KEY,
    itemID INTEGER NOT NULL,
    userID INTEGER NOT NULL,
    userRating INTEGER NOT NULL CHECK (userRating BETWEEN 1 AND 5),
    userComment TEXT,
    commentLikes INTEGER DEFAULT 0 NOT NULL CHECK (commentLikes >= 0),
    commentDislikes INTEGER DEFAULT 0 NOT NULL CHECK (commentDislikes >= 0),
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,

);


  -- Table to store cart headers/metadata
CREATE TABLE carts (
    cartID INT IDENTITY(1,1) PRIMARY KEY,
    userID INT NOT NULL,
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
	cart_status VARCHAR(20) NOT NULL
);

-- Table to store cart items
CREATE TABLE cart_items (
    cartID INT,
    itemID INT,
    ownerName VARCHAR(100),
    quantity INT,
    price DECIMAL(10,2),
 
);

CREATE TABLE price_negotiations (
    negotiationID VARCHAR(20) PRIMARY KEY,
    consumerID INT NOT NULL,
    farmerID INT NOT NULL,
    productID INT NOT NULL,
    newPrice FLOAT NOT NULL,
    negotiation_status VARCHAR(20) NOT NULL DEFAULT 'Pending',
    notes VARCHAR(500),
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    cartID INT,
    originalPrice FLOAT NOT NULL,
    quantity INT NOT NULL,  -- Added quantity field
    CONSTRAINT status_check CHECK (negotiation_status IN ('Pending', 'Accepted', 'Rejected')),
    CONSTRAINT price_check CHECK (newPrice > 0),
    CONSTRAINT quantity_check CHECK (quantity > 0)  -- Added quantity check
);

CREATE SEQUENCE negotiation_counter_seq
    START WITH 1
    INCREMENT BY 1;

CREATE TRIGGER trg_GenerateNegotiationID
ON price_negotiations
INSTEAD OF INSERT
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO price_negotiations (
        negotiationID,
        consumerID,
        farmerID,
        productID,
        newPrice,
        negotiation_status,
        notes,
        timestamp,
        cartID,
        originalPrice,
        quantity
    )
    SELECT 
        'NEG-' + CAST(YEAR(i.timestamp) AS VARCHAR(4)) + '-' + 
        RIGHT('000' + CAST(NEXT VALUE FOR negotiation_counter_seq AS VARCHAR(3)), 3),
        i.consumerID,
        i.farmerID,
        i.productID,
        i.newPrice,
        i.negotiation_status,
        i.notes,
        i.timestamp,
        i.cartID,
        i.originalPrice,
        i.quantity
    FROM inserted i;
END;

-- Create sequences for order and finance counters
CREATE SEQUENCE dbo.order_counter_seq
    START WITH 1
    INCREMENT BY 1;
GO

CREATE SEQUENCE dbo.finance_counter_seq
    START WITH 1
    INCREMENT BY 1;
GO

-- Create Orders table without default constraint
CREATE TABLE dbo.Orders (
    orderID VARCHAR(50) PRIMARY KEY,
    cartID INT NOT NULL,
    totalPrice DECIMAL(10,2) NOT NULL,
    ownerID INT NOT NULL,
    clientID INT NOT NULL,
    orderDate DATETIME NOT NULL DEFAULT GETDATE(),
    status VARCHAR(20) NOT NULL,
    orderStatus VARCHAR(20) NOT NULL,
    orderDeliverDate DATETIME,
    fullName VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    phoneNum VARCHAR(20) NOT NULL,
    shippingAddress TEXT NOT NULL
);
GO

-- Create Finances table without default constraint
CREATE TABLE dbo.Finances (
    financeID VARCHAR(50) PRIMARY KEY,
    orderID VARCHAR(50) NOT NULL,
    [timestamp] DATETIME NOT NULL DEFAULT GETDATE(),
    paidByUserID INT NOT NULL,
    paidToUserID INT NOT NULL,
    totalAmount DECIMAL(10,2) NOT NULL,

);
GO

-- Create trigger for Orders table
CREATE TRIGGER trg_GenerateOrderID
ON dbo.Orders
INSTEAD OF INSERT
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO dbo.Orders (
        orderID,
        cartID,
        totalPrice,
        ownerID,
        clientID,
        orderDate,
        status,
        orderStatus,
        orderDeliverDate,
        fullName,
        email,
        phoneNum,
        shippingAddress
    )
    SELECT 
        'ORD-' + RIGHT('000' + CAST(NEXT VALUE FOR dbo.order_counter_seq AS VARCHAR(3)), 3),
        i.cartID,
        i.totalPrice,
        i.ownerID,
        i.clientID,
        COALESCE(i.orderDate, GETDATE()),
        i.status,
        i.orderStatus,
        i.orderDeliverDate,
        i.fullName,
        i.email,
        i.phoneNum,
        i.shippingAddress
    FROM inserted i;
END;
GO

-- Create trigger for Finances table
CREATE TRIGGER trg_GenerateFinanceID
ON dbo.Finances
INSTEAD OF INSERT
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO dbo.Finances (
        financeID,
        orderID,
        [timestamp],
        paidByUserID,
        paidToUserID,
        totalAmount
    )
    SELECT 
        'FN-' + RIGHT('000' + CAST(NEXT VALUE FOR dbo.finance_counter_seq AS VARCHAR(3)), 3),
        i.orderID,
        COALESCE(i.[timestamp], GETDATE()),
        i.paidByUserID,
        i.paidToUserID,
        i.totalAmount
    FROM inserted i;
END;
GO

  -- Notifications table
CREATE TABLE notifications (
    notificationID INT IDENTITY(1,1) PRIMARY KEY,
    userID INT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    text TEXT NOT NULL,
    status VARCHAR(20) NOT NULL,
    type VARCHAR(50) NOT NULL,
   );